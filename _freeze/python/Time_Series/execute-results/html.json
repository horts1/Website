{
  "hash": "9c03e3d004f19fb4c56bcf61636207b8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Time Series Example\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n### Example of Dummy Data\n\n::: {#1b11f9bb .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nimport warnings\n\n# Dummy dataset\ndata = {\n    'Month': pd.date_range(start='2020-01-01', end='2023-12-01', freq='MS'),\n    'SuccessfulProjects': [10, 12, 15, 11, 13, 17, 14, 18, 16, 19, 17, 20] * 4,\n    'AvgHoursWorked': [160, 170, 150, 180, 140, 190, 165, 175, 155, 170, 160, 180] * 4,\n    'TeamSize': [5, 6, 7, 5, 8, 10, 9, 11, 6, 7, 8, 9] * 4,\n    'ProjectComplexity': [3, 4, 5, 6, 4, 7, 5, 6, 4, 5, 6, 7] * 4\n}\ndf = pd.DataFrame(data)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Month</th>\n      <th>SuccessfulProjects</th>\n      <th>AvgHoursWorked</th>\n      <th>TeamSize</th>\n      <th>ProjectComplexity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-01-01</td>\n      <td>10</td>\n      <td>160</td>\n      <td>5</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-02-01</td>\n      <td>12</td>\n      <td>170</td>\n      <td>6</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-03-01</td>\n      <td>15</td>\n      <td>150</td>\n      <td>7</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-04-01</td>\n      <td>11</td>\n      <td>180</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-05-01</td>\n      <td>13</td>\n      <td>140</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Exploratory Data Analysis\n\n::: {#5ed7337a .cell execution_count=2}\n``` {.python .cell-code}\ndf.set_index('Month', inplace=True)\n\n# Plotting the data\ndf.plot(figsize=(12, 8), subplots=True)\nplt.show()\n\n# Decompose the time series (for successful projects only, for simplicity)\ndecomposition = seasonal_decompose(df['SuccessfulProjects'], model='additive')\nfig = decomposition.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Time_Series_files/figure-html/cell-3-output-1.png){width=947 height=666}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Time_Series_files/figure-html/cell-3-output-2.png){width=661 height=469}\n:::\n:::\n\n\n### Model Building\n\n::: {#b905fcab .cell execution_count=3}\n``` {.python .cell-code}\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\n# Suppress specific warnings\nwarnings.filterwarnings(\"ignore\", message=\"no frequency information was provided\")\n\n# Splitting the data into training and testing sets\ntrain = df[:'2022']\ntest = df['2023':]\n\n# Building the ARIMAX model with adjustments to improve convergence\nmodel = SARIMAX(\n    train['SuccessfulProjects'], \n    exog=train[['AvgHoursWorked', 'TeamSize', 'ProjectComplexity']], \n    order=(1, 1, 1),\n    enforce_stationarity=False,\n    enforce_invertibility=False\n)\nmodel_fit = model.fit(disp=False, maxiter=500, method='nm')\n\n# Summary of the model\nprint(model_fit.summary())\n\n# Forecasting\nforecast = model_fit.get_forecast(steps=len(test), exog=test[['AvgHoursWorked', 'TeamSize', 'ProjectComplexity']])\nforecast_df = test.copy()\nforecast_df['Forecast'] = forecast.predicted_mean\n\n# Plotting the actual vs forecasted values\nplt.figure(figsize=(12, 8))\nplt.plot(train['SuccessfulProjects'], label='Training Data')\nplt.plot(test['SuccessfulProjects'], label='Actual Data')\nplt.plot(forecast_df['Forecast'], label='Forecasted Data', linestyle='--')\nplt.title('Project Success Forecast with Additional Variables')\nplt.xlabel('Date')\nplt.ylabel('Number of Successful Projects')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               SARIMAX Results                                \n==============================================================================\nDep. Variable:     SuccessfulProjects   No. Observations:                   36\nModel:               SARIMAX(1, 1, 1)   Log Likelihood                 -69.563\nDate:                Wed, 10 Jul 2024   AIC                            151.127\nTime:                        15:09:26   BIC                            160.106\nSample:                    01-01-2020   HQIC                           154.148\n                         - 12-01-2022                                         \nCovariance Type:                  opg                                         \n=====================================================================================\n                        coef    std err          z      P>|z|      [0.025      0.975]\n-------------------------------------------------------------------------------------\nAvgHoursWorked       -0.0284      0.041     -0.690      0.490      -0.109       0.052\nTeamSize              0.7813      0.249      3.139      0.002       0.293       1.269\nProjectComplexity     1.1319      0.612      1.848      0.065      -0.068       2.332\nar.L1                 0.5053      0.257      1.967      0.049       0.002       1.009\nma.L1                -1.0000   1458.798     -0.001      0.999   -2860.192    2858.191\nsigma2                3.6376   5306.701      0.001      0.999   -1.04e+04    1.04e+04\n===================================================================================\nLjung-Box (L1) (Q):                   0.03   Jarque-Bera (JB):                 1.79\nProb(Q):                              0.86   Prob(JB):                         0.41\nHeteroskedasticity (H):               0.91   Skew:                             0.31\nProb(H) (two-sided):                  0.88   Kurtosis:                         2.05\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Time_Series_files/figure-html/cell-4-output-2.png){width=962 height=671}\n:::\n:::\n\n\n### Model Evaluation\n\n::: {#a48e7b24 .cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n# Evaluation metrics\nmae = mean_absolute_error(test['SuccessfulProjects'], forecast.predicted_mean)\nmse = mean_squared_error(test['SuccessfulProjects'], forecast.predicted_mean)\nprint(f'Mean Absolute Error: {mae}')\nprint(f'Mean Squared Error: {mse}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Absolute Error: 1.8805247500041948\nMean Squared Error: 4.89588917787364\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Time_Series_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}